generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(GENERAL_MANAGER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([email, role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Image {
  id   String @id @default(cuid())
  data Bytes  @db.MediumBlob
  type String
  size Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id   String @id @default(cuid())
  data Bytes  @db.LongBlob
  type String
  size Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  Duration  String
  Active    Boolean
  imageId   String?  @unique
  galleryId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Innovator {
  id                 String           @id @default(cuid()) // Fixed for MySQL
  name               String
  imageId            String?
  email              String
  phone              String
  projectTitle       String
  projectDescription String?
  objective          String?
  stageDevelopment   StageDevelopment
  status             RecordStatus     @default(PENDING)
  isVisible          Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Collaborator {
  id                         String       @id @default(cuid())
  companyName                String
  primaryPhoneNumber         String
  optionalPhoneNumber        String?
  email                      String?
  location                   String?
  site                       String?
  industrialSector           String
  specialization             String
  experienceProvided         String?
  machineryAndEquipment      String?
  imageId                    String?
  status                     RecordStatus @default(PENDING)
  isVisible                  Boolean      @default(false)
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  experienceProvidedMedia    ExperienceProvidedMedia[]
  machineryAndEquipmentMedia MachineryAndEquipmentMedia[]
}

model ExperienceProvidedMedia {
  id             String        @id @default(cuid())
  media          String
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model MachineryAndEquipmentMedia {
  id             String        @id @default(cuid())
  media          String
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum StageDevelopment {
  IDEA
  PROTOTYPE
  DEVELOPMENT
  TESTING
  LAUNCHED
}

enum RecordStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum UserRole {
  GENERAL_MANAGER
  NEWS_EDITOR
  REQUEST_REVIEWER
}