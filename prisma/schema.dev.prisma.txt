generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==== AUTHENTICATION & USERS ====
model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(GENERAL_MANAGER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  // Audit trail
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  isActive              Boolean                @default(true)
  
  // Relations
  auditLogs             AuditLog[]
  createdNews           News[]                 @relation("NewsCreator")
  updatedNews           News[]                 @relation("NewsUpdater")

  @@index([email, role])
  @@index([role, isActive])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@index([email])
  @@index([expires])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@index([email])
  @@index([expires])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
  @@index([email])
  @@index([expires])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

// ==== MEDIA MANAGEMENT ====
model Image {
  id          String @id @default(cuid())
  filename    String
  originalName String?
  url         String // CDN URL instead of BLOB
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  alt         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  news        News[]
  innovators  Innovator[]
  collaborators Collaborator[]
  
  @@index([filename])
  @@index([mimeType])
  StrategicPlan StrategicPlan[]
}

model Media {
  id          String @id @default(cuid())
  filename    String
  originalName String?
  url         String // CDN URL instead of BLOB
  mimeType    String
  size        Int
  duration    Int? // for video/audio
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  experienceProvidedMedia    ExperienceProvidedMedia[]
  machineryAndEquipmentMedia MachineryAndEquipmentMedia[]
  
  @@index([filename])
  @@index([mimeType])
}

// ==== CONTENT MANAGEMENT ====
model News {
  id          String   @id @default(cuid()) // Changed to String for consistency
  title       String
  slug        String   @unique // For SEO-friendly URLs
  content     String   @db.Text
  excerpt     String?  @db.Text
  duration    String?  // Reading time
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  publishedAt DateTime?
  
  // Media relations
  imageId     String?
  image       Image?   @relation(fields: [imageId], references: [id])
  galleryIds  String?  @db.Text // JSON array of image IDs
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?
  createdBy   User?    @relation("NewsCreator", fields: [createdById], references: [id])
  updatedBy   User?    @relation("NewsUpdater", fields: [updatedById], references: [id])
  
  @@index([slug])
  @@index([isActive, publishedAt])
  @@index([isFeatured])
  @@index([createdAt])
}

model StrategicPlan {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?  @db.Text
  category    String?  // e.g., "Annual", "5-Year", "Department"
  priority    PlanPriority @default(MEDIUM)
  status      PlanStatus @default(DRAFT)
  isActive    Boolean  @default(true)
  publishedAt DateTime?
  
  // Timeline
  startDate   DateTime?
  endDate     DateTime?
  
  // Media
  imageId     String?
  image       Image?   @relation(fields: [imageId], references: [id])
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?
  
  @@index([slug])
  @@index([isActive, publishedAt])
  @@index([status])
  @@index([category])
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String   @db.Text
  category    String?  // e.g., "General", "Technical", "Application"
  order       Int      @default(0) // For sorting
  isActive    Boolean  @default(true)
  isSticky    Boolean  @default(false) // Pin to top
  
  // Multi-language support
  questionAr  String?
  answerAr    String?  @db.Text
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive, order])
  @@index([category])
  @@index([isSticky])
}

// ==== SUBMISSIONS ====
model Innovator {
  id                 String           @id @default(cuid())
  name               String
  email              String
  phone              String
  projectTitle       String
  projectDescription String?          @db.Text
  objective          String?          @db.Text
  stageDevelopment   StageDevelopment
  status             RecordStatus     @default(PENDING)
  isVisible          Boolean          @default(false)
  
  // Media
  imageId            String?
  image              Image?           @relation(fields: [imageId], references: [id])
  
  // Additional fields
  location           String?
  educationLevel     String?
  fieldOfStudy       String?
  workExperience     String?          @db.Text
  
  // Audit
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  reviewedAt         DateTime?
  reviewedById       String?
  
  @@index([status])
  @@index([isVisible])
  @@index([stageDevelopment])
  @@index([createdAt])
  @@index([email])
}

model Collaborator {
  id                         String       @id @default(cuid())
  companyName                String
  primaryPhoneNumber         String
  optionalPhoneNumber        String?
  email                      String?
  location                   String?
  website                    String?      // Renamed from 'site' for clarity
  industrialSector           String
  specialization             String
  experienceProvided         String?      @db.Text
  machineryAndEquipment      String?      @db.Text
  status                     RecordStatus @default(PENDING)
  isVisible                  Boolean      @default(false)
  
  // Media
  imageId                    String?
  image                      Image?       @relation(fields: [imageId], references: [id])
  
  // Additional fields
  establishedYear            Int?
  employeeCount              String?      // e.g., "1-10", "11-50", "51-200"
  annualRevenue              String?      // Range for privacy
  certifications             String?      @db.Text
  
  // Audit
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  reviewedAt                 DateTime?
  reviewedById               String?
  
  // Relations
  experienceProvidedMedia    ExperienceProvidedMedia[]
  machineryAndEquipmentMedia MachineryAndEquipmentMedia[]
  
  @@index([status])
  @@index([isVisible])
  @@index([industrialSector])
  @@index([createdAt])
  @@index([email])
}

model ExperienceProvidedMedia {
  id             String        @id @default(cuid())
  mediaId        String
  media          Media         @relation(fields: [mediaId], references: [id])
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@index([collaboratorId])
  @@index([mediaId])
}

model MachineryAndEquipmentMedia {
  id             String        @id @default(cuid())
  mediaId        String
  media          Media         @relation(fields: [mediaId], references: [id])
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@index([collaboratorId])
  @@index([mediaId])
}

// ==== AUDIT & LOGGING ====
model AuditLog {
  id          String     @id @default(cuid())
  action      AuditAction
  tableName   String     // e.g., "News", "Innovator"
  recordId    String     // ID of the affected record
  oldValues   String?    @db.Text // JSON
  newValues   String?    @db.Text // JSON
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  ipAddress   String?
  userAgent   String?    @db.Text
  createdAt   DateTime   @default(now())
  
  @@index([action])
  @@index([tableName])
  @@index([userId])
  @@index([createdAt])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?  @db.Text
  isPublic    Boolean  @default(false) // Can be accessed by non-admin users
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([key])
}

// ==== ENUMS ====
enum StageDevelopment {
  IDEA
  PROTOTYPE
  DEVELOPMENT
  TESTING
  PILOT
  MARKET_READY
}

enum RecordStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
  UNDER_REVIEW
}

enum UserRole {
  GENERAL_MANAGER
  NEWS_EDITOR
  REQUEST_REVIEWER
  CONTENT_MODERATOR
  VIEWER
}

enum PlanPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PlanStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  ARCHIVE
  LOGIN
  LOGOUT
}